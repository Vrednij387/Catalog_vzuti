<?php
/*
 * We offer the best and most useful modules PrestÐ°Shop and modifications for your online store.
 *
 * We are experts and professionals in PrestaShop
 *
 * @author    Elcommerce <support@elcommece.com.ua>
 * @copyright 2010-2019 Elcommerce TM
 * @license   Comercial
 * @category  PrestaShop
 * @category  Module
 */
if(!defined('_PS_VERSION_')) {
    exit;
}
use PrestaShop\PrestaShop\Core\Payment\PaymentOption;
//require_once __DIR__ . '/autoload.php';
class ecm_monopay extends PaymentModule {
    private $_html = '';
    private $post_errors = array();
    public $status_hold;
    public $status_completed;
    public $status_created;
    const MONO_PAY_URL = 'https://pay.mbnk.biz/';
    const MONO_PAY_HOLD = 'hold';
    const MONO_PAY_SUCCESS = 'success';
    const MONO_PAY_REVERSED = 'reversed';
    public function __construct() {
        $this->name = 'ecm_monopay';
        $this->tab = 'payments_gateways';
        $this->version = '1.1.1';
        $this->author = 'Elcommerce';
        $this->need_instance = 1;
        $this->bootstrap = true;
        $this->controllers = array('payment', 'validation');
        $this->currencies = true;
        $this->currencies_mode = 'checkbox';
        if(Configuration::get('monopay_token')) {
            $this->monopay_merchant_token = Configuration::get('monopay_token');
        }
        parent::__construct();
        $config = Configuration::getMultiple(array('PS_OS_MONOPAY_Holdpayment', 'PS_OS_MONOPAY_Completed', 'PS_OS_MONOPAY_Created'));
        if(isset($config['PS_OS_MONOPAY_Holdpayment'])) {
            $this->status_hold = $config['PS_OS_MONOPAY_Holdpayment'];
        }
        if(isset($config['PS_OS_MONOPAY_Completed'])) {
            $this->status_completed = $config['PS_OS_MONOPAY_Completed'];
        }
        if(isset($config['PS_OS_MONOPAY_Created'])) {
            $this->status_created = $config['PS_OS_MONOPAY_Created'];
        }
        $this->displayName = $this->l('Payments with monopay');
        $this->description = $this->l('Payments via monopay with hold money');
        if(!isset($this->monopay_merchant_token)) {
            $this->warning = $this->l('Your monopay account must be set correctly (specify token)');
        }
        $this->ps_versions_compliancy = array('min' => '1.7', 'max' => _PS_VERSION_);
    }
    public function install() {
        include dirname(__FILE__) . '/init/install.php';
        return (parent::install()
            && $this->registerHook('paymentOptions')
            && $this->registerHook('displayAdminOrder')
            && $this->registerHook('displayOrderDetail')
            && $this->registerHook('displayOrderHistory')
            && $this->registerHook('actionCartSave')
            && $this->_addOS()
            && $this->addTab('AdminmonopayConfirmation', 'monopayConfirmation', -1)
        );
    }
    public function uninstall() {
        include dirname(__FILE__) . '/init/uninstall.php';
        return $this->deleteTab('AdminmonopayConfirmation')
            && parent::uninstall();
    }
    public function getContent() {
        if(Tools::isSubmit('submitmonopay')) {
            $this->postValidation();
            if(!@count(@$this->post_errors)) {
                $this->postProcess();
            } else {
                foreach($this->post_errors as $err) {
                    $this->_html .= $this->displayError($err);
                }
            }
        }
        $this->_html .= $this->renderForm();
        $this->_displayabout();
        return $this->_html;
    }
    public function renderForm() {
        $tr = $this->l('The token can be withdrawn in a special account https://fop.monobank.ua/ The test token can be withdrawn for request https://api.monobank.ua/ In test mode, you can use a real bank card, funds will not be debited. Or a set of numbers generated by the LUNA algorithm. For example: ');
        $tr .= ' <strong>4539335426724979</strong></br>';
        $tr .= $this->l('In which case the CVC2 code of that row of the card can be entered in any way (the row of the card is more responsible for the current date).');
        $information = '<div class="warning alert alert-info">'.$tr.'</div>';
        $this->fields_form[0]['form'] = array(
            'legend' => array(
                'title' => $this->l('Settings'),
                'icon' => 'icon-cog',
            ),
            'input' => array(
                array(
                    'type' => 'text',
                    'label' => $this->l('Token'),
                    'prefix' => '<i class="icon icon-key"></i>',
                    'col' => '4',
                    'desc' => $this->l('Mono Token'),
                    'name' => 'monopay_token',
                ),
                array(
                    'label' => $this->l('Information'),
                    'col' => 4,
                    'type' => 'html',
                    'name' => 'monopay_information',
                    'html_content' => $information,
                ),
                array(
                    'type' => 'switch',
                    'label' => $this->l('Order after payment'),
                    'name' => 'monopay_postvalidate',
                    'desc' => $this->l('Create order after receive payment notification'),
                    'values' => array(
                        array(
                            'id' => 'monopay_postvalidate_on',
                            'value' => 1,
                            'label' => $this->l('Enabled'),
                        ),
                        array(
                            'id' => 'monopay_postvalidate_off',
                            'value' => 0,
                            'label' => $this->l('Disabled'),
                        ),
                    ),
                ),
                array(
                    'type' => 'select',
                    'multiple' => true,
                    'class' => 'chosen',
                    'col' => '4',
                    'label' => $this->l('Shipping included'),
                    'name' => 'monopay_shipping[]',
                    'selected' => 'monopay_shipping',
                    'options' => array(
                        'query' => $query = $this->getCarriers(),
                        'id' => 'id',
                        'name' => 'name',
                    ),
                    'hint' => $this->l('Payment includes shipping'),
                    'desc' => $this->l('For selected carriers payment includes shipping'),
                    'size' => count($query),
                ),
                array(
                    'type' => 'switch',
                    'label' => $this->l('Show Visa/MasterCard logo'),
                    'name' => 'monopay_show_logo',
                    'desc' => $this->l('Show Visa/MasterCard logo'),
                    'values' => array(
                        array(
                            'id' => 'monopay_show_logo_on',
                            'value' => 1,
                            'label' => $this->l('Enabled'),
                        ),
                        array(
                            'id' => 'monopay_show_logo_off',
                            'value' => 0,
                            'label' => $this->l('Disabled'),
                        ),
                    ),
                ),
                array(
                    'type' => 'text',
                    'label' => $this->l('Invoice life time'),
                    'prefix' => '<i class="icon icon-clock-o"></i>',
                    'col' => '1',
                    'desc' => $this->l('Invoice life time, days'),
                    'name' => 'monopay_ilt',
                ),
                array(
                    'type' => 'switch',
                    'label' => $this->l('Send order detail to mono'),
                    'name' => 'monopay_order_detail',
                    'values' => array(
                        array(
                            'id' => 'monopay_order_detail_on',
                            'value' => 1,
                            'label' => $this->l('Enabled'),
                        ),
                        array(
                            'id' => 'monopay_order_detail_off',
                            'value' => 0,
                            'label' => $this->l('Disabled'),
                        ),
                    ),
                ),
                array(
                    'type' => 'switch',
                    'label' => $this->l('Hold money'),
                    'name' => 'monopay_hold',
                    'desc' => $this->l('Money will be frozen on the payer\'s card until the store administrator confirms the order.'),
                    'values' => array(
                        array(
                            'id' => 'monopay_hold_on',
                            'value' => 1,
                            'label' => $this->l('Enabled'),
                        ),
                        array(
                            'id' => 'monopay_hold_off',
                            'value' => 0,
                            'label' => $this->l('Disabled'),
                        ),
                    ),
                ),
                array(
                    'type' => 'switch',
                    'label' => $this->l('Answer log'),
                    'name' => 'monopay_answer_log',
                    'values' => array(
                        array(
                            'id' => 'monopay_answer_log_on',
                            'value' => 1,
                            'label' => $this->l('Enabled'),
                        ),
                        array(
                            'id' => 'monopay_answer_log_off',
                            'value' => 0,
                            'label' => $this->l('Disabled'),
                        ),
                    ),
                ),
            ),
            'submit' => array(
                'name' => 'submitmonopay',
                'title' => $this->l('Save'),
            ),
        );
        $helper = new HelperForm();
        $helper->module = $this;
        $helper->show_toolbar = false;
        $helper->table = $this->table;
        $lang = new Language((int)Configuration::get('PS_LANG_DEFAULT'));
        $helper->default_form_language = $lang->id;
        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;
        $helper->identifier = $this->identifier;
        $helper->submit_action = 'submitmonopay';
        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false).'&configure='.$this->name.
            '&tab_module='.$this->tab.'&module_name='.$this->name;
        $helper->token = Tools::getAdminTokenLite('AdminModules');
        $helper->tpl_vars = array(
            'fields_value' => $this->getConfigFieldsValues(),
            'languages' => $this->context->controller->getLanguages(),
            'id_language' => $this->context->language->id,
        );
        return $helper->generateForm($this->fields_form);
    }
    public function getConfigFieldsValues() {
        $fields_values = array();
        $fields_values['monopay_token'] = Configuration::get('monopay_token');
        $fields_values['monopay_postvalidate'] = Configuration::get('monopay_postvalidate');
        $fields_values['monopay_show_logo'] = Configuration::get('monopay_show_logo');
        $fields_values['monopay_shipping[]'] = json_decode(Configuration::get('monopay_shipping'), true);
        $fields_values['monopay_hold'] = Configuration::get('monopay_hold');
        $fields_values['monopay_order_detail'] = Configuration::get('monopay_order_detail');
        $fields_values['monopay_answer_log'] = Configuration::get('monopay_answer_log');
        $fields_values['monopay_ilt'] = Configuration::get('monopay_ilt');
        return $fields_values;
    }
    private function postProcess() {
        Configuration::updateValue('monopay_token', Tools::getValue('monopay_token'));
        Configuration::updateValue('monopay_postvalidate', Tools::getValue('monopay_postvalidate'));
        Configuration::updateValue('monopay_show_logo', Tools::getValue('monopay_show_logo'));
        Configuration::updateValue('monopay_shipping', json_encode(Tools::getValue('monopay_shipping')));
        Configuration::updateValue('monopay_hold', Tools::getValue('monopay_hold'));
        Configuration::updateValue('monopay_order_detail', Tools::getValue('monopay_order_detail'));
        Configuration::updateValue('monopay_answer_log', Tools::getValue('monopay_answer_log'));
        Configuration::updateValue('monopay_ilt', Tools::getValue('monopay_ilt'));
        $this->_html .= $this->displayConfirmation($this->l('Settings updated.'));
    }
    public function getCarriers() {
        $carriers = Carrier::getCarriers($this->context->language->id, false, false, false, null, Carrier::ALL_CARRIERS);
        $cs = [];
        foreach($carriers as $carrier) {
            $cs[] = ['id' => $carrier['id_reference'], 'name' => $carrier['name'].($carrier['active'] != 1 ? ' (inactive)' : '')];
        }
        return $cs;
    }
    private function postValidation() {
        if(Tools::getValue('monopay_token') && (!Validate::isString(Tools::getValue('monopay_token')))) {
            $this->post_errors[] = $this->l('Invalid').' '.$this->l('Public key');
        }
    }
    public function hookPaymentOptions($params) {
        if(!$this->active) {
            return;
        }
        if(!$this->checkCurrency($params['cart'])) {
            return;
        }
        $this->smarty->assign(
            array(
                'id_cart' => $params['cart']->id,
                'this_path' => $this->_path,
                'this_path_ssl' => Tools::getShopDomainSsl(true, true).__PS_BASE_URI__.'modules/'.$this->name.'/',
            )
        );
        $newOption = new PaymentOption();
        $newOption->setCallToActionText($this->l('Pay with monopay'))
            ->setAction($this->context->link->getModuleLink($this->name, 'redirect', array(), true))
            ->setAdditionalInformation($this->fetch('module:ecm_monopay/views/templates/hook/payment.tpl'))
            ->setModuleName($this->name);
        ;
        if(Configuration::get('monopay_show_logo')) {
            $newOption->setLogo(Tools::getHttpHost(true).$this->_path.'views/img/mono.png');
        }
        $payment_options = [
            $newOption,
        ];
        return $payment_options;
    }
    public function checkCurrency($cart) {
        $currency_order = new Currency($cart->id_currency);
        $currencies_module = $this->getCurrency($cart->id_currency);
        if(is_array($currencies_module)) {
            foreach($currencies_module as $currency_module) {
                if($currency_order->id == $currency_module['id_currency']) {
                    return true;
                }
            }
        }
        return false;
    }
    public static function validateAnsver($message) {
        Logger::addLog('monopay: '.$message);
        die($message);
    }
    public function deleteTab($name) {
        $idTab = Tab::getIdFromClassName($name);
        if($idTab) {
            $tab = new Tab($idTab);
            $tab->delete();
        }
        return true;
    }
    public function addTab($name, $public_name, $id_parent_tab) {
        $tab = new Tab();
        $tab->class_name = $name;
        $tab->name[(int)(Configuration::get('PS_LANG_DEFAULT'))] = $this->l($public_name);
        $tab->id_parent = $id_parent_tab;
        $tab->module = $this->name;
        $tab->add();
        return true;
    }
    private function _addOS() {
        $prefix = 'PS_OS_MONOPAY_';
        $mail_template = 'preparation';
        $this->_addStatus($prefix.'Created', [
            'en' => 'MONOPAY Invoice created',
            'ru' => 'MONOPAY Ð¡ÑÐµÑ ÑÐ¾Ð·Ð´Ð°Ð½',
            'uk' => 'MONOPAY Ð Ð°ÑÑÐ½Ð¾Ðº ÑÑÐ²Ð¾ÑÐµÐ½Ð¾',
        ], $mail_template, null, false);
        $this->_addStatus($prefix.'Waitpayment', [
            'en' => 'MONOPAY Waiting payment',
            'ru' => 'MONOPAY ÐÐ»Ð°ÑÐµÐ¶ Ð¾Ð¶Ð¸Ð´Ð°ÐµÑ',
            'uk' => 'MONOPAY ÐÐ»Ð°ÑÑÐ¶ Ð¾ÑÑÐºÑÑ',
        ], null, null, false);
        $this->_addStatus($prefix.'Holdpayment', [
            'en' => 'MONOPAY Payment success. Wait confirmation',
            'ru' => 'MONOPAY ÐÐ»Ð°ÑÐµÐ¶ Ð¿ÑÐ¾Ð²ÐµÐ´ÐµÐ½. ÐÐ¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ Ð¿Ð¾Ð´ÑÐ²ÐµÑÐ¶Ð´ÐµÐ½Ð¸Ñ',
            'uk' => 'MONOPAY ÐÐ»Ð°ÑÑÐ¶ Ð¿ÑÐ¾Ð²ÐµÐ´ÐµÐ½Ð¾. ÐÐ°ÑÐµÐºÐ°Ð¹ÑÐµ Ð¿ÑÐ´ÑÐ²ÐµÑÐ´Ð¶ÐµÐ½Ð½Ñ',
        ], null, null, false);
        $this->_addStatus($prefix.'Completed', [
            'en' => 'MONOPAY The payment has been completed',
            'ru' => 'MONOPAY ÐÐ»Ð°ÑÐµÐ¶ Ð·Ð°Ð²ÐµÑÑÐµÐ½',
            'uk' => 'MONOPAY ÐÐ»Ð°ÑÑÐ¶ Ð·Ð°Ð²ÐµÑÑÐµÐ½Ð¾',
        ], 'payment', null, true);
        return true;
    }
    private function _addStatus($status_name, $name, $template = false, $logable = false, $payd = false) {
        $id_status = Configuration::get($status_name);
        $status = new OrderState($id_status);
        $status->send_email = ($template ? 1 : 0);
        $status->invoice = ($template ? 1 : 0);
        $status->logable = $logable;
        $status->delivery = 0;
        $status->payd = $payd;
        $status->hidden = 0;
        $status->unremovable = true;
        if(!$id_status) {
            $color = sprintf('#%02X%02X%02X', rand(0, 255), rand(0, 255), rand(0, 255));
            $status->color = $color;
        }
        $lngs = Language::getLanguages();
        foreach($lngs as $lng) {
            $status->name[$lng['id_lang']] = $name[$lng['iso_code']];
            if($template) {
                $status->template[$lng['id_lang']] = $template;
            }
        }
        if(!$id_status) {
            if($status->add()) {
                Configuration::updateValue($status_name, $status->id);
                return true;
            }
        } else {
            $status->update();
            return true;
        }
        return false;
    }
    public function hookdisplayAdminOrder($params) {
        $order = new Order($params['id_order']);
        if($order->module == $this->name && ($order->current_state == $this->status_hold || $order->current_state == $this->status_created)) {
            $invoice = $this->getMonoInvoice($params['id_order'], 'order');
            if(!$invoice['invoice']) {
                $this->displayError($this->l('No invoice from Monobank'));
                return;
            }
            if($order->current_state == $this->status_hold) {
                $err = ($this->context->cookie->redirect_errors) ? $this->context->cookie->redirect_errors : '';
                $type = ($err) ? 'warning' : 'success';
                if(empty($err)) {
                    $err = ($this->context->cookie->redirect_success) ? $this->context->cookie->redirect_success : '';
                }
                $currency = new Currency($order->id_currency);
                $amount = $order->total_paid_real;
                $amount = number_format($amount, 2, '.', '');
                $this->context->smarty->assign(
                    array(
                        'ecmmonopayhold_invoiceid_monopay' => $invoice['invoice'],
                        'ecmmonopayhold_id_order' => $params['id_order'],
                        'ecmmonopayhold_paid' => $amount,
                        'err' => $err,
                        'ecmmonopayhold_currency_sign' => $currency->sign,
                        'type' => $type,
                        'payment_holded' => true,
                    )
                );
                $this->context->cookie->__unset('redirect_errors');
                $this->context->cookie->__unset('redirect_success');
                $this->context->cookie->__set('redirect_errors', '');
                $this->context->cookie->__set('redirect_success', '');
                $this->context->cookie->write();
            }
            if($order->current_state == $this->status_created) {
                $this->context->smarty->assign(
                    array(
                        'monoPayLink' => self::MONO_PAY_URL.$invoice['invoice'],
                        'invoice_created' => true,
                    )
                );
            }
            return $this->display(__FILE__, 'displayAdminOrder.tpl');
        } elseif($order->module != $this->name && !$order->hasBeenPaid()) {
            $this->context->smarty->assign(
                array(
                    'ecmmonopayhold_id_order' => $order->id,
                    'ecmmonopayhold_id_cart' => $order->id_cart,
                )
            );
            return $this->display(__FILE__, 'displayChangeToMono.tpl');
        }
    }
    public
    function hookdisplayOrderDetail(
        $params
    ) {
        if($params['order']->module == $this->name && $params['order']->current_state == $this->status_created) {
            $invoice = $this->getMonoInvoice($params['order']->id, 'order');
            if($invoice) {
                $this->context->smarty->assign(
                    array(
                        'monoPayLink' => self::MONO_PAY_URL.$invoice['invoice'],
                    )
                );
                return $this->display(__FILE__, 'displayOrderDetail.tpl');
            }
        }
    }
    public
    function hookdisplayOrderHistory(
        $params
    ) {
        if(isset($params['id_order']) && $params['id_order']) {
            $order = new Order($params['id_order']);
            if($order->module == $this->name && $order->current_state == $this->status_created) {
                $invoice = $this->getMonoInvoice($order->id, 'order');
                if($invoice) {
                    $this->context->smarty->assign(
                        array(
                            'monoPayLink' => self::MONO_PAY_URL.$invoice['invoice'],
                        )
                    );
                    return $this->display(__FILE__, 'displayOrderHistory.tpl');
                }
            }
        }
    }
    public function hookActionCartSave($params) {
        // ÐÐ¾Ð»ÑÑÐµÐ½Ð¸Ðµ Ð¾Ð±ÑÐµÐºÑÐ° ÐºÐ¾ÑÐ·Ð¸Ð½Ñ
        $id_cart = $params['cart']->id;
        $ordernumber = Order::getIdByCartId($id_cart);
        if(!$ordernumber) {
            Db::getInstance()->execute('
        DELETE 
        FROM `'._DB_PREFIX_.'ecm_monopay`
        WHERE `id_cart` = '.(int)$id_cart
            );
        }
    }
    public function getMonoInvoice($id, $entity = 'cart') {
        return Db::getInstance()->getRow('
        SELECT `invoice`,`invoice_date_add`
        FROM `'._DB_PREFIX_.'ecm_monopay`
        WHERE `id_'.$entity.'` = '.(int)$id
        );
    }
    public function logger($controller, $requestBody) {
        $logfile = dirname(__FILE__).'/log/log.txt';
        $logger = new FileLogger(0); //0 == debug level, logDebug() wonât work without this.
        $logger->setFilename($logfile);
        $logger->logDebug('controller');
        $logger->logDebug($controller);
        $logger->logDebug('requestBody');
        $logger->logDebug($requestBody);
    }
    public function isWithinInterval($date1, $date2, $interval) {
        if(!$interval || $interval === null || $interval == 0) {
            $interval = 1;
        }
        $intervalInSeconds = $interval * 24 * 3600;
        $timestamp1 = strtotime($date1);
        $timestamp2 = strtotime($date2);
        $difference = abs($timestamp2 - $timestamp1);
        return $difference <= $intervalInSeconds;
    }
    public function changeIdOrderState($new_os, $id_order) {
        $history = new OrderHistory();
        $history->id_order = $id_order;
        $history->changeIdOrderState($new_os, $id_order);
        $history->addWithemail();
        return true;
    }

    public function getProductRules()
    {
        $return = array();
        $result = Db::getInstance()->executeS(
            'SELECT *
			FROM `' . _DB_PREFIX_ . 'cart_rule_product_rule_value` 
			WHERE 1'
        );

        foreach ($result as $row)
        {
            $return[$row['id_item']] = $row['id_product_rule'];
        }

        return $return;
    }

    public function getCartRuleProductRules()
    {
        $return = array();
        $result = Db::getInstance()->executeS(
            'SELECT *
			FROM `' . _DB_PREFIX_ . 'cart_rule_product_rule` 
			WHERE 1'
        );

        foreach ($result as $row)
        {
            $return[$row['id_product_rule']] = $row;
        }

        return $return;
    }

    public function getCartRuleProductRuleGroups()
    {
        $return = array();
        $result = Db::getInstance()->executeS(
            'SELECT *
			FROM `' . _DB_PREFIX_ . 'cart_rule_product_rule_group` g 
			LEFT JOIN `' . _DB_PREFIX_ . 'cart_rule` r ON (r.`id_cart_rule` = g.`id_cart_rule`)
			WHERE 1'
        );

        foreach ($result as $row)
        {
            $return[$row['id_product_rule_group']] = $row;
        }

        return $return;
    }

    public function createInvoice($id_cart, $moduleSettings, $controller)
    {
        if(!$id_cart) return false;

        $cart = new Cart($id_cart);
        Db::getInstance()->delete('ecm_monopay', 'id_cart='.(int)$cart->id);
        $monoClient = new \MonoPay\Client($this->monopay_merchant_token);
        $carrier = new Carrier($cart->id_carrier);
        $shipping = $moduleSettings['monopay_shipping[]'];
        $shipping_cost_real = $cart->getOrderTotal(true, Cart::ONLY_SHIPPING);
        if(is_array($shipping) && in_array($carrier->id_reference, $shipping)) {
            $amount = $cart->getOrderTotal(true, Cart::BOTH);
            $shipping_cost = $shipping_cost_real;
        } else {
            $amount = $cart->getOrderTotal(true, Cart::BOTH) - $shipping_cost_real;
        }
        $amount = (int)($amount * 100);
        $currency = new Currency($cart->id_currency);
        $order_number = $cart->id;
        $customer = new Customer($cart->id_customer);
        $destination = $this->l('Pay cart â', 'redirect').$order_number.' '.$this->l('on', 'redirect').' '.$_SERVER['HTTP_HOST'].'. '.$this->l('Customer', 'redirect').' '.$customer->firstname.' '.$customer->lastname;
        $order = [];
        $merchantPaymInfo = [];
        $order['ccy'] = (int)$currency->iso_code_num;
        $cartRules = $cart->getCartRules();
        foreach($cartRules as $cartRule) {
            if($cartRule['gift_product'] > 0) {
                $gifts[$cartRule['gift_product']] = [
                    'id_gift_product_attribute' => $cartRule['gift_product_attribute'],
                ];
            }
        }
        if($moduleSettings['monopay_order_detail'])
        {
            $cartProducts = $cart->getProducts();
            $cart_rule_product_rule_groups = $this->getCartRuleProductRuleGroups();
            $cart_rule_product_rules = $this->getCartRuleProductRules();
            $product_rules = $this->getProductRules();
            $current_date = date('Y-m-d H:i:s');
            //var_dump($cartProducts); exit();
            foreach($cartProducts as $key => $product)
            {
                //$merchantPaymInfo['basketOrder'][$key]['name'] = '#'.$product['id_product'].' ÐÐ·ÑÑÑÑ '.$product['name'] . " (".$product['attributes'].") x" . $product['cart_quantity']; //"ÐÐ·ÑÑÑÑ ".trim($product['name'].' '.((isset($product['attributes']) && $product['attributes']) ?: ''));
                // 8-10-2024
                // ÐÐ¾Ð±ÑÐ¸Ð¹ Ð²ÐµÑÑÑ, Ñ Ð½Ð°Ñ Ð½Ð° ÑÐµÐºÐ¾Ð²Ñ Ð·Ñ ÑÐºÐ°ÑÐ¿ÐµÑÐºÐ°Ð¼Ð¸ Ð¿Ð¸ÑÐµ (ÐÐ·ÑÑÑÑ Ð¨ÐºÐ°ÑÐ¿ÐµÑÐºÐ¸ â¦. )
                // Ð¡Ð°Ð¼Ð¸Ð¹ Ð¿ÑÐ¾ÑÑÐ¸Ð¹ ÑÐ¿Ð¾ÑÑÐ±  - Ð¿ÑÐ¸Ð²Ê¼ÑÐ·Ð°ÑÐ¸ÑÑ Ð´Ð¾ ÑÑÐ½Ð¸ (Ð²ÑÐµ ÑÐ¾ Ð¼ÐµÐ½ÑÑÐµ 1500 Ð³ÑÐ½ Ð¿ÑÐ´Ðµ Ð±ÐµÐ· Ð¿ÑÐ¸ÑÑÐ°Ð²ÐºÐ¸ "ÐÐ·ÑÑÑÑ", Ð²ÑÐµ ÑÐ¾ Ð±ÑÐ»ÑÑÐµ - Ð· Ð½ÐµÑ).
                if($product['price_wt'] > 1500) {
                    $merchantPaymInfo['basketOrder'][$key]['name'] = ' ÐÐ·ÑÑÑÑ '.$product['name'] . " (".$product['attributes'].") x" . $product['cart_quantity']; //"ÐÐ·ÑÑÑÑ ".trim($product['name'].' '.((isset($product['attributes']) && $product['attributes']) ?: ''));
                } else {
                    $merchantPaymInfo['basketOrder'][$key]['name'] = trim($product['name']) . " (".$product['attributes'].") x" . $product['cart_quantity']; //"ÐÐ·ÑÑÑÑ ".trim($product['name'].' '.((isset($product['attributes']) && $product['attributes']) ?: ''));
                }
                //$merchantPaymInfo['basketOrder'][$key]['code'] = trim($product['reference']);
                $merchantPaymInfo['basketOrder'][$key]['code'] = trim($product['id_product']);
                $merchantPaymInfo['basketOrder'][$key]['qty'] = (int)$product['cart_quantity'];
                $sum = $product['price_wt'];
                if(isset($gifts) && is_array($gifts))
                {
                    if(isset($gifts[$product['id_product']]))
                    {
                        $sum = ($gifts[$product['id_product']]['id_gift_product_attribute'] == $product['id_product_attribute']) ? 1 : $sum;
                    }
                }
                $merchantPaymInfo['basketOrder'][$key]['sum'] = intval($sum * 100);
                $merchantPaymInfo['basketOrder'][$key]['icon'] = $this->context->link->getImageLink($product['link_rewrite'], $product['id_image']);
                if($product['unity'])
                {
                    $merchantPaymInfo['basketOrder'][$key]['unit'] = $product['unity'];
                }

                if(isset($product_rules[$product['id_product']]))
                {
                    $product['id_product_rule'] = $product_rules[$product['id_product']];
                    if(!empty($cart_rule_product_rules[$product['id_product_rule']]) && $cart_rule_product_rules[$product['id_product_rule']]['type'] === 'products')
                    {
                        $product['id_product_rule_group'] = $cart_rule_product_rules[$product['id_product_rule']];
                        if(!empty($cart_rule_product_rule_groups[$product['id_product_rule_group']['id_product_rule_group']]))
                        {
                            $discount = $cart_rule_product_rule_groups[$product['id_product_rule_group']['id_product_rule_group']];
                            if((int)$discount['active'] && (int)$discount['quantity'] && !(int)$discount['id_customer'] && strtotime($discount['date_from']) <= strtotime($current_date) && strtotime($discount['date_to']) >= strtotime($current_date))
                            {

                                $discount_value = ((float)$discount['reduction_percent'] ? (float)$discount['reduction_percent'] : (float)$discount['reduction_amount']);

                                $merchantPaymInfo['basketOrder'][$key]['discounts'][] = array(
                                    'type' => 'DISCOUNT',
                                    'mode' => ((float)$discount['reduction_percent'] ? 'PERCENT' : 'VALUE'),
                                    'value' => $discount_value
                                );
                            }
                        }
                    }
                }
            }
            if(isset($shipping_cost) && $shipping_cost > 0) {
                $i = ++$key;
                $merchantPaymInfo['basketOrder'][$i]['name'] = $this->l('ÐÐ¾ÑÑÐ°Ð²ÐºÐ°', 'redirect');
                $merchantPaymInfo['basketOrder'][$i]['qty'] = 1;
                $merchantPaymInfo['basketOrder'][$i]['sum'] = intval($shipping_cost * 100);
            }

        }
        $id_order = 0;
        if($moduleSettings['monopay_postvalidate'] && !Order::getOrderByCartId($cart->id)) {
            $merchantPaymInfo['reference'] = (string)$order_number;
        } else {
            if(!($order_number = Order::getOrderByCartId($cart->id))) {
                $this->validateOrder((int)$cart->id, Configuration::get('PS_OS_MONOPAY_Created'), $amount, $this->displayName, null, array(), null, false, $cart->secure_key);
                $order_number = $this->currentOrder;
            }
            $id_order = (int)$order_number;
            $merchantPaymInfo['reference'] = (string)$order_number;
            $destination = $this->l('Pay order â', 'redirect').$order_number.' '.$this->l('on', 'redirect').'. '.$_SERVER['HTTP_HOST'].' '.$this->l('Customer', 'redirect').' '.$customer->firstname.' '.$customer->lastname;
        }

        $merchantPaymInfo['destination'] = $destination;
        $order['merchantPaymInfo'] = $merchantPaymInfo;
        $order['webHookUrl'] = $this->context->link->getModuleLink('ecm_monopay', 'validation', array("id" => $order_number), true);
        $order['redirectUrl'] = $this->context->link->getModuleLink('ecm_monopay', 'success', array("id" => $order_number), true);
        if($moduleSettings['monopay_ilt'])
        {
            $order['validity'] = $moduleSettings['monopay_ilt'] * 24 * 3600; //ÑÑÑÐ¾Ðº Ð´ÑÑ Ð² ÑÐµÐºÑÐ½Ð´Ð°Ñ, Ð·Ð° Ð·Ð°Ð¼Ð¾Ð²ÑÑÐ²Ð°Ð½Ð½ÑÐ¼ ÑÐ°ÑÑÐ½Ð¾Ðº Ð¿ÐµÑÐµÑÑÐ°Ñ Ð±ÑÑÐ¸ Ð´ÑÐ¹ÑÐ½Ð¸Ð¼ ÑÐµÑÐµÐ· 24 Ð³Ð¾Ð´Ð¸Ð½Ð¸
        }
        $action = ($moduleSettings['monopay_hold']) ? 'hold' : 'debit';
        $order['paymentType'] = $action;
        $monoPayment = new \MonoPay\Payment($monoClient);
        $invoice = $monoPayment->create(
            $amount,
            $order
        );

        if($moduleSettings['monopay_answer_log']) {
            $this->logger($controller, $invoice);
        }
        //if($_SERVER['REMOTE_ADDR'] == '134.249.84.233') { echo '<pre>'; var_dump($amount, $order); echo '</pre>';  exit;}
        if(isset($invoice['pageUrl']) && isset($invoice['invoiceId'])) {
            Db::getInstance()->insert(
                'ecm_monopay',
                array(
                    'id_cart' => (int)$cart->id,
                    'id_order' => (int)$id_order,
                    'invoice' => $invoice['invoiceId'],
                    'invoice_date_add' => date('Y-m-d H:i:s')
                )
            );
        }
        return $invoice;
    }
    public function addOrderPayment($result_amount, $data, $id_order) {
        $order = new Order($id_order);
        if($result_amount != 0) {
            $order_payment = new OrderPayment();
            $order_payment->order_reference = $order->reference;
            $order_payment->id_currency = self::getIdByNumericIsoCode($data['ccy']);
            $currency = new Currency($order_payment->id_currency);
            $order_payment->conversion_rate = $currency->conversion_rate;
            $order_payment->payment_method = $data['paymentMethod'];
            $order_payment->transaction_id = $data['rrn'];
            $order_payment->amount = $result_amount;
            $order_payment->card_number = $data['maskedPan'];
            $order_payment->card_holder = $data['country'];
            $order_payment->date_add = date('Y-m-d H:i:s');
            if($order_payment->id_currency == $order->id_currency) {
                $order->total_paid_real += $order_payment->amount;
            } else {
                $order->total_paid_real += Tools::ps_round(Tools::convertPrice($order_payment->amount, $order_payment->id_currency, false), 2);
            }
            $order->valid = 1;
            $order->update();
            $res = $order_payment->add();
        }
        if($res) {
            return true;
        }
    }
    public function processOrderPaymentDetails($new_os, $ordernumber, $result_amount, $monoPayment, $invoiceId) {
        $order = new Order((int)$ordernumber);
        if(!Validate::isLoadedObject($order)) {
            self::validateAnsver($this->l('Order does not exist'));
        }
        Db::getInstance()->update('ecm_monopay', array('id_order' => $order->id), "id_cart = ".$order->id_cart." AND `invoice` ='".$invoiceId."'");
        if($new_os != $order->current_state && $order->current_state != $this->status_completed) {
            if($new_os == $this->status_completed) {
                $order->total_paid_real = 0;
                $order->update();
                $info = $monoPayment->successDetails($invoiceId);
                $this->addOrderPayment($result_amount, $info, $ordernumber);
            }
            if($new_os == $this->status_hold) {
                $order->total_paid_real = $result_amount;
                $order->update();
            }
        }
    }
    public function processOrderComplete($monoPayment, $data, $id) {
        if($data['status'] == self::MONO_PAY_SUCCESS) {
            $new_os = $this->status_completed;
        } elseif($data['status'] == self::MONO_PAY_HOLD) {
            $new_os = $this->status_hold;
        }
        $postvalidate = Configuration::get('monopay_postvalidate');
        $entity = ($postvalidate == 1) ? 'cart' : 'order';
        $invoice = $this->getMonoInvoice($id, $entity);
        $result_amount = floatval($data['amount'] / 100);
        if($postvalidate == 1) {
            $cart = new Cart((int)$id);
            $ordernumber = Order::getOrderByCartId($cart->id);
            if(!$ordernumber) {
                $this->validateOrder($cart->id, $this->status_created, $result_amount, $this->displayName, null, array(), null, false, $cart->secure_key);
            }
            $ordernumber = Order::getOrderByCartId($cart->id);
            $this->processOrderPaymentDetails($new_os, $ordernumber, $result_amount, $monoPayment, $invoice['invoice']);
        } else {
            $ordernumber = $id;
            $this->processOrderPaymentDetails($new_os, $ordernumber, $result_amount, $monoPayment, $invoice['invoice']);
        }
        $order = new Order((int)$ordernumber);
        if($new_os != $order->current_state) {
            $this->changeIdOrderState($new_os, $ordernumber);
        }
        $customer = new Customer((int)$order->id_customer);
        return [
            'id_cart' => (int)$order->id_cart,
            'id_module' => (int)$this->id,
            'id_order' => (int)$order->id,
            'secure_key' => $customer->secure_key,
        ];
    }
    public static function getIdByNumericIsoCode($numericIsoCode, $idShop = 0) {
        if(_PS_VERSION_ >= '1.7.8') {
            $id_currensy = Currency::getIdByNumericIsoCode($numericIsoCode);
        } else {
            $currencyCodes = [
                'USD' => '840',
                // ÐÐ¾Ð»Ð»Ð°Ñ Ð¡Ð¨Ð
                'EUR' => '978',
                // ÐÐ²ÑÐ¾
                'PLN' => '985',
                // ÐÐ¾Ð»ÑÑÐºÐ¸Ð¹ Ð·Ð»Ð¾ÑÑÐ¹
                'UAH' => '980', // Ð£ÐºÑÐ°Ð¸Ð½ÑÐºÐ°Ñ Ð³ÑÐ¸Ð²Ð½Ð°
            ];
            $iso_code = array_search($numericIsoCode, $currencyCodes);
            $id_currensy = Currency::getIdByIsoCode($iso_code);
        }
        return $id_currensy;
    }
    private function _displayabout() {
        $this->_html .= '
		<div class="panel">
		<div class="panel-heading">
			<i class="icon-envelope"></i> '.$this->l('Information').'
		</div>
		<div id="dev_div">
		<span><b>'.$this->l('Version').':</b> '.$this->version.'</span><br>
		<span><b>'.$this->l('Developer').':</b> <a class="link" href="mailto:support@elcommerce.com.ua" target="_blank">Elcommerce</a></span></br>
		<span><b>'.$this->l('Info').':</b> <a class="link" href="https://elcommerce.com.ua" target="_blank">https://elcommerce.com.ua</a></span><br><br>
		<p style="text-align:center"><a href="https://elcommerce.com.ua/"><img src="https://elcommerce.com.ua/img/m/logo.png" alt="Elcommerce" /></a>
		</div>
		</div>
		';
    }
}